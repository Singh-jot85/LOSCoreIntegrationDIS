{
    "validation_spec": "{}",
    "request_body_spec": "(\ndef first_of_next_month_date:\n  (now | strftime(\"%Y-%m-01\") | strptime(\"%Y-%m-%d\") | mktime) \n  + (32*24*60*60)\n  | strftime(\"%Y-%m-01\")\n  | strptime(\"%Y-%m-%d\") | mktime\n  | (.*1000 | floor | tostring)\n  | \"/Date(\" + . + \")/\";\n\ndef get_NCUACategoryCode($collateral; $creTypes):\n    ({\n        \"first\": \"1TDF\",\n        \"second\": \"2TDF\"\n    }) as $positionMapping | \n    # Define SEC-producing combinations\n    ([\n        {\"category\": \"all_business_assets\", \"type\": \"all_assets\"},\n        {\"category\": \"cash_and_equivalents\", \"type\": \"deposit_account\"},\n        {\"category\": \"machinery_and_equipment\"},\n        {\"category\": \"inventory_accounts_receivable\", \"type\": \"all_accounts_receivable\"}\n    ]) as $secPairs |\n    (\n        if (INDEX($secPairs[]; \n            select(\n                .category == $collateral.category \n                and ((has(\"type\") | not) or (.type == $collateral.type))\n            ))\n        ) \n            then \"SEC\"\n        elif $collateral.category == \"residential_real_estate\" \n            then (\n                if $collateral.type == \"multi_family_dwelling\" or $collateral.type == \"1_4_family_dwelling\" \n                    then $positionMapping[$collateral.lien_position] // null\n                else null \n                end \n            )\n        elif $collateral.category == \"vehicles\" \n            then  (\n                if $collateral.type == \"motor_vehicle_new\" or $collateral.type == \"ground_transportation_new\" \n                    then \"NEWV\" \n                elif $collateral.type == \"motor_vehicle_used\" or $collateral.type == \"ground_transportation_old\" \n                    then \"USDV\" \n                else null \n                end\n            )\n        elif $collateral.category == \"land\" and $collateral.type == \"land_for_development\" \n            then $positionMapping[$collateral.lien_position] // null\n        elif $collateral.category == \"commercial_real_estate\" \n            then (\n                if ($collateral.type | IN($creTypes))\n                    then $positionMapping[$collateral.lien_position] // null\n                else null \n                end\n            )\n        else null \n        end \n    );\n{\n    Input: {\n        Requests: [\n            {\n                __type: \"AccountMaintenanceRequest:http://www.opensolutions.com/CoreApi\",\n                Accounts: [ \n                    {\n                        AccountNumber: (.loan_number // null),\n                        IsAccountMaintenance: false,\n                        MajorAccountTypeCode: \"CML\",\n                        CurrentMinorAccountTypeCode: (\n                            if .product.product_code == \"SB_LOC\" \n                                then \"BRLV\" \n                            elif .product.product_code == \"SB_TL\" \n                                then \"BTFX\" \n                            else null \n                            end\n                        ),\n                        BankOrganizationNumber: 1,\n                        PaymentAmount: (if .product.product_code == \"SB_LOC\" then null elif .product.product_code == \"SB_TL\" then ((.loan_interfaces[] | select(.interface_type == \"sherman\" and .is_latest == true) | (.details.outLOAN_BUILDER.PmtStream // .details.outEQUAL_PMT.PmtStream) | if type == \"object\" then .Pmt elif type == \"array\" then .[0].Pmt else null end) | tonumber // null) else null end),\n                        BranchOrganizationNumber: (.details.boarding_details.branch_code // 51),\n                        CalculationScheduleEffectiveDate: \"/Date(\\(now*1000 | floor))/\",\n                        OwnershipCode: (\n                            if ([.loan_relations[] | select(.relation_type == \"borrower\")] | length) == 1 \n                                then \"S\" \n                            else \"JA\" \n                            end\n                        ),\n                        NCUACategoryCode: ( \n                            [ .collaterals[] ] as $collateralList \n                            | [$collateralList[] | select(.type | IN($creTypes[])) ] as $CRECollateralList\n                            | [$collateralList[] | select(.category == \"vehicles\") ] as $AUTOCollateralList\n                            | [$collateralList[] | select(.category | IN($equipmentCategoryTypes[])) ] as $equipmentCollateralList\n                            | (\n                                if ( $collateralList | type == \"array\" and length == 0 )\n                                    then \"USEC\"\n                                elif $CRECollateralList | length > 0\n                                    then get_NCUACategoryCode($CRECollateralList[0]; $creTypes)\n                                elif $AUTOCollateralList | length > 0\n                                    then get_NCUACategoryCode($AUTOCollateralList[0]; $creTypes)\n                                elif $equipmentCollateralList | length > 0\n                                    then get_NCUACategoryCode($equipmentCollateralList[0]; $creTypes)\n                                else get_NCUACategoryCode($collateralList[0]; $creTypes)\n                                end\n                            )\n                        ),\n                        CurrentAccountStatusCode: \"ACT\",\n                        DateMaturity: (\n                            if (\n                                .product.product_code == \"SB_LOC\" \n                                or .product.product_code == \"SB_TL\"\n                            )\n                                then ( .maturity_date | \n                                    if . == null or . == \"\" \n                                        then null \n                                    else (strptime(\"%Y-%m-%d\") | mktime * 1000 | \"/Date(\\(.))/\" )\n                                    end\n                                ) \n                            else null \n                            end\n                        ), \n                        NextDueDate: (.loan_approval.approved_first_payment_date | \n                            if (. == null or . == \"\") \n                                then null \n                            else strptime(\"%Y-%m-%d\") | mktime * 1000 | \"/Date(\\(.))/\" \n                            end\n                        ),\n                        PaymentCalendarPeriodCode: \"MNTH\",\n                        OriginalBalance: (.disbursements | ( \n                            if type == \"array\" \n                                then .[0] \n                            elif type == \"object\" \n                                then . \n                            else null \n                            end ) | .disbursement_amount // null\n                        ),\n                        OriginalTerm: (.loan_approval.approved_term // null),\n                        IsShareStatement: true,\n                        IsUseProductDefaultDeliveryMethod: true,\n                        ContractDate: (.closing_date | \n                            if . == null or . == \"\" \n                                then null \n                            else strptime(\"%Y-%m-%d\") | mktime * 1000 | \"/Date(\\(.))/\" \n                            end\n                        ),\n                        InterestRate: (.loan_approval.approved_rate/100 // null),\n                        AccountRiskRating: {\n                            AccountRiskRatingEffectiveDate: (.underwriter_decision_date | \n                                if . == null or . == \"\" \n                                    then null \n                                else strptime(\"%Y-%m-%d\") | mktime * 1000 | \"/Date(\\(.))/\" \n                                end\n                            ),\n                            AccountRiskRatingCode: \"003B\"\n                        },\n                        AccountUserFields: [ {\n                            UserFieldCode: \"LCOP\",\n                            UserFieldValue: (.application_number // null)\n                        } ],\n                        AccountRoles: ( \n                            ( (\n                                if (.loan_relations[] | select(.is_primary_borrower == true) | .entity_type == \"sole_proprietor\" )\n                                    then [\n                                        {\n                                            AccountRoleCode: \"GUAR\",\n                                            AccountRoleValue: (.loan_relations[] | select(.is_primary_borrower == true) | .external_customer_id as $cif | .details.core_integration_response.customer_details[$cif].customer_details.org_cif | tostring // null),\n                                            EntityTypeCode: \"ORG\",\n                                            IsRemove: null,\n                                            LiabilityAmount: null,\n                                            LiabilityPercent: null\n                                        },\n                                        {\n                                            AccountRoleCode: \"SIGN\",\n                                            AccountRoleValue: (.loan_relations[] | select(.is_primary_borrower == true) | .external_customer_id // null),\n                                            EntityTypeCode: \"PERS\",\n                                            IsRemove: null,\n                                            LiabilityAmount: null,\n                                            LiabilityPercent: null\n                                        } \n                                    ] \n                                else [ .flat_relations[] | select(.external_customer_id != null) ] \n                                    # | unique_by(.external_customer_id) \n                                    | map(\n                                        {\n                                            AccountRoleCode: ( \n                                                if .relation_type == \"borrower\" \n                                                    then \"GUAR\" \n                                                elif .relation_type == \"guarantor\"\n                                                    then \"GUAR\" \n                                                elif .relation_type == \"owner\" \n                                                    then \"SIGN\" \n                                                else null \n                                                end\n                                            ),\n                                            AccountRoleValue: (.external_customer_id // null),\n                                            EntityTypeCode: (\n                                                if .party_type == \"individual\" \n                                                    then \"PERS\" \n                                                else \"ORG\" \n                                                end\n                                            ),\n                                            IsRemove: null,\n                                            LiabilityAmount: null,\n                                            LiabilityPercent: null\n                                        }\n                                    )\n                                end ) \n                            ) + \n                            ( \n                                .details.boarding_details | to_entries\n                                | map(\n                                    select(\n                                        ( .key | IN(\"acto\",\"loff\",\"oemp\") )\n                                        and .value != null \n                                        and .value != \"\" \n                                    )\n                                )\n                                | map(\n                                    {\n                                        AccountRoleCode: (.key | ascii_upcase),\n                                        AccountRoleValue: (\n                                            if .value \n                                                then (.value | tonumber)\n                                            else null\n                                            end\n                                        ),\n                                        EntityTypeCode: \"PERS\",\n                                        IsRemove: null,\n                                        LiabilityAmount: null,\n                                        LiabilityPercent: null\n                                    }\n                                )\n                            ) \n                        ),\n                        Organizations: [{\n                            IsTaxReportedForOwner: true,\n                            IsTaxReportedForSigner: true,\n                            OrganizationNumber: ((.loan_relations[] | select(.is_primary_borrower == true) | .external_customer_id) // null),\n                            AccountRoles: [{\n                                AccountRoleCode: \"GUAR\"\n                            }],\n                            CreditScores: {\n                                CreditScore: (.loan_interfaces[] | select(.interface_type == \"lumos\") | .details.lumos_response.results.lumosPrediction.lumos.score // null),\n                                ScoreDate: (((.loan_interfaces[] | select(.interface_type == \"lumos\") | .details.lumos_response.metadata.applicationRunDate // null) | if . == null or . == \"\" then null else split(\"T\")[0] | strptime(\"%Y-%m-%d\") | mktime * 1000 | \"/Date(\\(.))/\" end) // null)\n                            }\n                        }],\n                        AccountLoanDetail: {                            \n                            AccountLoanInformation: {\n                                LoanSourceCode: \"LCOP\",\n                                IsLoanLimit: (if .product.product_code == \"SB_LOC\" then true elif .product.product_code == \"SB_TL\" then false else null end),\n                                CRACategoryCode: (.cra_loan_type // null), \n                                CreditReportTypeCode: \"EXCL\",\n                                CreditScore: (.fico_score | tostring // null),\n                                Date1stPmtDue: (.loan_approval.approved_first_payment_date | if . == null or . == \"\" then null else strptime(\"%Y-%m-%d\") | mktime * 1000 | \"/Date(\\(.))/\" end), \n                                EstMaturityDate: (if .product.product_code == \"SB_TL\" then null elif .product.product_code == \"SB_LOC\" then (.maturity_date | if . == null or . == \"\" then null else strptime(\"%Y-%m-%d\") | mktime * 1000 | \"/Date(\\(.))/\" end) else null end),\n                                LineOfCreditCloseDate: null,\n                                GraceDays: \"10\",\n                                IsBalloonLoan: false,\n                                IsBillingLeadDaysOverrideNull: false,\n                                IsDemandLoan: false,\n                                IsLateFeeCalculationVariablesToAccountLevel: true,\n                                IsNonRESPA: null,\n                                IsNotRealEstate: false,\n                                IsPrinSurplusProc: false,\n                                IsRateChangeReCalulatedPayment: (if .product.product_code == \"SB_LOC\" then true elif .product.product_code == \"SB_TL\" then false else null end),\n                                IsRepricingPlanAllowed: false,\n                                IsRestructured: null,\n                                IsRevolveLoan: (if .product.product_code == \"SB_LOC\" then true elif .product.product_code == \"SB_TL\" then false else null end),\n                                LoanLossCategoryCode: \"COMM\",\n                                LoanQualityCode: null,\n                                MultiDueDates: null,\n                                NextPaymentChangeDate: null,\n                                OTSLoanCategoryCode: null,\n                                OddDaysInterestDue: null,\n                                OrignalLTVRatio: (if .approved_amount then .approved_amount / .total_collateral_value_v2 else null end),\n                                PaymentDueDayNumber: \"1\",\n                                PaymentMethodCode: \"BILL\",\n                                PmtChangeLeadDays: null,\n                                PurposeCode: (\n                                    if $purposeCode[.loan_purpose] \n                                        then $purposeCode[.loan_purpose] \n                                    else \"OTHR\" \n                                    end\n                                ),\n                                RateChangeLeadDays: null,\n                                RefinancedPriorAccountNumber: null,\n                                RiskRatingCode: \"003B\",\n                                UpdateWhenNull: null\n                            },\n                            AccountLoanLimitHistory: {\n                                CreditLimitAmount: (\n                                    if .product.product_code == \"SB_LOC\" \n                                        then (.loan_approval.approved_amount // null) \n                                    else null end\n                                ),\n                                EffectiveDate: \"/Date(\\(now*1000 | floor))/\",\n                                InactiveDate: (if .product.product_code == \"SB_LOC\" then (.maturity_date | if . == null or . == \"\" then null else strptime(\"%Y-%m-%d\") | mktime * 1000 | \"/Date(\\(.))/\" end) else null end)\n                            },\n                            AccountHolds: (if any(.loan_relations[]?.collaterals[]?; \n                                .category == \"cash_and_equivalents\" and .type == \"deposit_account\") \n                                then \n                                .loan_relations[] \n                                | .collaterals[] \n                                | select(.category == \"cash_and_equivalents\" and .type == \"deposit_account\") \n                                else \n                                null \n                                end) | {\n                                AccountHoldCode: (if . == null then null else \"COLH\" end), \n                                DepositAccountNumber: (if . == null then null else .details.account_number end), \n                                HoldAmount: (if . == null then null else .details.pledged_amount end), \n                                },\n                            AccountReviewHistory: {\n                                ReviewDate: (if .product.product_code == \"SB_TL\" then \"/Date(\\((now + 31536000)*1000 | floor))/\" else null end)\n                            },\n                            AccountInterestHistoryInformations: [\n                                {\n                                    AmortizationTerm: (.loan_approval.approved_term * 30.4375 // null) | round,\n                                    BalanceCategoryCode: \"NOTE\",\n                                    CalculationScheduleNumber: (if .product.product_code == \"SB_LOC\" then 3 elif .product.product_code == \"SB_TL\" then 4 else null end),\n                                    DaysMethodCode: \"ACT\",\n                                    EffectiveDate: \"/Date(\\(now*1000 | floor))/\",\n                                    InterestBase: \"360\",\n                                    InterestMethodCode: \"SMP\",\n                                    IsCapitalizeInterest: false,\n                                    IsNegativeAmortizationAllowed: false,\n                                    MarginFixed: (if .differential_rate then (.differential_rate/100 | tostring) else null end),\n                                    MaximumInterestRate: (.max_rate/100 // null),\n                                    MinimumInterestRate: ( .loan_approval.approved_rate/100 // null ),\n                                    NextRateChangeDate: (\n                                        if .product.product_code == \"SB_LOC\" \n                                            then first_of_next_month_date\n                                        else null \n                                        end\n                                    ),\n                                    PaymentChangeCalenderPeriodCode: (if .product.product_code == \"SB_LOC\" then \"MNTH\" else null end), \n                                    RateChangeCalendarPeriodCode: (if .product.product_code == \"SB_LOC\" then \"MNTH\" else null end), \n                                    RateChangeMethodCode: (if .product.product_code == \"SB_LOC\" then \"CALP\" else null end),\n                                    RateTypeCode: (if .product.product_code == \"SB_LOC\" then \"VAR\" elif .product.product_code == \"SB_TL\" then \"FIX\" else null end)\n                                }\n                            ],\n                            AccountPaymentHistoryInformation: {\n                                IsMajorMinorOverride: false,\n                                PaymentBalanceCategoryCode: \"NOTE\",\n                                PaymentBalanceTypeCode: (if .product.product_code == \"SB_LOC\" then \"INT\" elif .product.product_code == \"SB_TL\" then \"DUE\" else null end),\n                                PaymentCalendarPeriodCode: \"MNTH\",\n                                PaymentDueDayNumber: \"1\",\n                                PaymentTypeCode: (if .product.product_code == \"SB_LOC\" then \"VINT\" elif .product.product_code == \"SB_TL\" then \"FDUE\" else null end)\n                            }\n                        }\n                    }\n                ]\n            } \n        ],\n        UserAuthentication: {}\n    }\n}\n)",
    "response_body_spec": "( .responses | { apiSuccess: (if .Output.Responses[0].WasSuccessful then .Output.Responses[0].WasSuccessful else false end), errors: {errorMsg: .Output.Responses[0].Errors[0].ErrorMessage, errorNum: .Output.Responses[0].Errors[0].ErrorNumber}, responses: ( .Output.Responses[0] | ( if .WasSuccessful then ({ id: .ResponseAccounts[0].AccountNumber, AccountNumber: .ResponseAccounts[0].AccountNumber}) else null end )) } )",
    "request_body_spec_config": "{\n    \"purposeCode\": {\n        \"Working Capital\": \"WKCP\",\n        \"Leasehold Improvement\": \"LSIM\",\n        \"Purchase Equipment\": \"PUEQ\",\n        \"Purchase Transport Equip\": \"PUTE\",\n        \"Purchase Other Capital Assets\": \"PUCA\",\n        \"Purchase Com'l RE\": \"PUCR\",\n        \"Other\": \"OTHR\",\n        \"Debt Consolidation\": \"DEBT\",\n        \"Debt Refinance\": \"DEBT\"\n    },\n    \"creTypes\": [\n        \"other_cre\",\n        \"office_flex\",\n        \"commercial_condominium\",\n        \"church\",\n        \"warehouse\",\n        \"healthcare\",\n        \"industrial\",\n        \"shopping_center\",\n        \"restaurant\",\n        \"office\",\n        \"retail\"\n    ],\n    \"equipmentCategoryTypes\": [\n        \"machinery_and_equipment\",\n        \"cash_and_equivalents\"\n    ]\n}",
    "response_body_spec_config": "{}"
}